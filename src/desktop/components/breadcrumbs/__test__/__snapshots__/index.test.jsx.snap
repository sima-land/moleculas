// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Breadcrumbs /> should render active child breadcrumbs with default isActiveChild function 1`] = `
<Breadcrumbs
  items={
    Array [
      Object {
        "items": Array [
          Object {
            "name": "First child",
            "url": "href",
          },
          Object {
            "isActive": true,
            "name": "Active",
          },
          Object {
            "name": "Third child",
          },
        ],
        "name": "First",
        "url": "href",
      },
      Object {
        "isActive": true,
        "name": "Active",
      },
    ]
  }
>
  <ul
    className="breadcrumbs"
  >
    <Breadcrumb
      canOpen={true}
      data-testid="breadcrumb:0"
      getSiblingHref={[Function]}
      getSiblingName={[Function]}
      href="href"
      isActiveSibling={[Function]}
      key="0"
      onSiblingsShow={[Function]}
      siblings={
        Array [
          Object {
            "name": "First child",
            "url": "href",
          },
          Object {
            "isActive": true,
            "name": "Active",
          },
          Object {
            "name": "Third child",
          },
        ]
      }
      title="First"
    >
      <li
        data-testid="breadcrumb:0"
      >
        <a
          className="link"
          href="href"
        >
          First
        </a>
        <span>
          <DownSVG
            className="toggle-icon"
            data-testid="breadcrumb:siblings-opener"
            fill="none"
            height="16"
            onClick={[Function]}
            viewBox="0 0 16 16"
            width="16"
            xmlns="http://www.w3.org/2000/svg"
          >
            <svg
              className="toggle-icon"
              data-testid="breadcrumb:siblings-opener"
              fill="none"
              height="16"
              onClick={[Function]}
              viewBox="0 0 16 16"
              width="16"
              xmlns="http://www.w3.org/2000/svg"
            >
              <g
                opacity=".3"
              >
                <mask
                  fill="#fff"
                  id="a"
                >
                  <path
                    clipRule="evenodd"
                    d="M3 3h10v10H3V3zM2 3a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v10a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3zm3.38 3.175a.5.5 0 0 0-.76.65l3 3.5a.5.5 0 0 0 .76 0l3-3.5a.5.5 0 1 0-.76-.65L8 9.232 5.38 6.175z"
                    fillRule="evenodd"
                  />
                </mask>
                <path
                  d="M13 3h1V2h-1v1zM3 3V2H2v1h1zm10 10v1h1v-1h-1zM3 13H2v1h1v-1zm1.675-6.88l.65.76-.65-.76zm.705.055l-.76.65.76-.65zm-.76.65l.76-.65-.76.65zm3 3.5l-.759.651.76-.65zm.76 0l.759.651-.76-.65zm3-3.5l-.76-.65.76.65zm-.055-.705l.651-.759-.65.76zm-.705.055l-.759-.651.76.65zM8 9.232l-.76.65.76.886.76-.886-.76-.65zM13 2H3v2h10V2zm1 11V3h-2v10h2zM3 14h10v-2H3v2zM2 3v10h2V3H2zm1-2a2 2 0 0 0-2 2h2V1zm10 0H3v2h10V1zm2 2a2 2 0 0 0-2-2v2h2zm0 10V3h-2v10h2zm-2 2a2 2 0 0 0 2-2h-2v2zM3 15h10v-2H3v2zm-2-2a2 2 0 0 0 2 2v-2H1zM1 3v10h2V3H1zm4.325 3.88a.5.5 0 0 1-.705-.055L6.14 5.524a1.5 1.5 0 0 0-2.115-.163L5.325 6.88zm.055-.705a.5.5 0 0 1-.055.705L4.024 5.36a1.5 1.5 0 0 0-.163 2.115L5.38 6.175zm3 3.5l-3-3.5L3.86 7.476l3 3.5L8.38 9.675zM8 9.5a.5.5 0 0 1 .38.175L6.86 10.976A1.5 1.5 0 0 0 8 11.5v-2zm-.38.175A.5.5 0 0 1 8 9.5v2a1.5 1.5 0 0 0 1.139-.524L7.62 9.675zm3-3.5l-3 3.5 1.519 1.301 3-3.5-1.519-1.301zm.055.705a.5.5 0 0 1-.055-.705l1.519 1.301a1.5 1.5 0 0 0-.163-2.115L10.675 6.88zm.705-.055a.5.5 0 0 1-.705.055l1.301-1.519a1.5 1.5 0 0 0-2.115.163l1.519 1.301zM8.76 9.883l2.62-3.058L9.86 5.524 7.241 8.58l1.518 1.302zM4.62 6.825l2.62 3.058L8.76 8.58 6.138 5.524 4.62 6.825z"
                  fill="#212121"
                  mask="url(#a)"
                />
              </g>
            </svg>
          </DownSVG>
        </span>
        <CSSTransition
          classNames={
            Object {
              "enter": "fade-enter",
              "enterActive": "fade-enter-active",
              "exit": "fade-exit",
              "exitActive": "fade-exit-active",
            }
          }
          in={false}
          timeout={200}
          unmountOnExit={true}
        >
          <Transition
            appear={false}
            enter={true}
            exit={true}
            in={false}
            mountOnEnter={false}
            onEnter={[Function]}
            onEntered={[Function]}
            onEntering={[Function]}
            onExit={[Function]}
            onExited={[Function]}
            onExiting={[Function]}
            timeout={200}
            unmountOnExit={true}
          />
        </CSSTransition>
      </li>
    </Breadcrumb>
    <Breadcrumb
      active={true}
      canOpen={false}
      data-testid="breadcrumb:1"
      getSiblingHref={[Function]}
      getSiblingName={[Function]}
      isActiveSibling={[Function]}
      key="1"
      onSiblingsShow={[Function]}
      title="Active"
    >
      <li
        data-testid="breadcrumb:1"
      >
        <span
          className="active"
        >
          Active
        </span>
      </li>
    </Breadcrumb>
  </ul>
</Breadcrumbs>
`;

exports[`<Breadcrumbs /> should render items with siblings 1`] = `
<Breadcrumbs
  items={
    Array [
      Object {
        "name": "First",
      },
      Object {
        "name": "Second",
      },
      Object {
        "items": Array [
          Object {
            "name": "third child 1",
          },
          Object {
            "name": "third child 2",
          },
          Object {
            "name": "third child 3",
          },
        ],
        "name": "Third",
      },
    ]
  }
>
  <ul
    className="breadcrumbs"
  >
    <Breadcrumb
      canOpen={false}
      data-testid="breadcrumb:0"
      getSiblingHref={[Function]}
      getSiblingName={[Function]}
      isActiveSibling={[Function]}
      key="0"
      onSiblingsShow={[Function]}
      title="First"
    >
      <li
        data-testid="breadcrumb:0"
      >
        <a
          className="link"
        >
          First
        </a>
      </li>
    </Breadcrumb>
    <Breadcrumb
      canOpen={false}
      data-testid="breadcrumb:1"
      getSiblingHref={[Function]}
      getSiblingName={[Function]}
      isActiveSibling={[Function]}
      key="1"
      onSiblingsShow={[Function]}
      title="Second"
    >
      <li
        data-testid="breadcrumb:1"
      >
        <a
          className="link"
        >
          Second
        </a>
      </li>
    </Breadcrumb>
    <Breadcrumb
      canOpen={true}
      data-testid="breadcrumb:2"
      getSiblingHref={[Function]}
      getSiblingName={[Function]}
      isActiveSibling={[Function]}
      key="2"
      onSiblingsShow={[Function]}
      siblings={
        Array [
          Object {
            "name": "third child 1",
          },
          Object {
            "name": "third child 2",
          },
          Object {
            "name": "third child 3",
          },
        ]
      }
      title="Third"
    >
      <li
        data-testid="breadcrumb:2"
      >
        <a
          className="link"
        >
          Third
        </a>
        <span>
          <DownSVG
            className="toggle-icon"
            data-testid="breadcrumb:siblings-opener"
            fill="none"
            height="16"
            onClick={[Function]}
            viewBox="0 0 16 16"
            width="16"
            xmlns="http://www.w3.org/2000/svg"
          >
            <svg
              className="toggle-icon"
              data-testid="breadcrumb:siblings-opener"
              fill="none"
              height="16"
              onClick={[Function]}
              viewBox="0 0 16 16"
              width="16"
              xmlns="http://www.w3.org/2000/svg"
            >
              <g
                opacity=".3"
              >
                <mask
                  fill="#fff"
                  id="a"
                >
                  <path
                    clipRule="evenodd"
                    d="M3 3h10v10H3V3zM2 3a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v10a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3zm3.38 3.175a.5.5 0 0 0-.76.65l3 3.5a.5.5 0 0 0 .76 0l3-3.5a.5.5 0 1 0-.76-.65L8 9.232 5.38 6.175z"
                    fillRule="evenodd"
                  />
                </mask>
                <path
                  d="M13 3h1V2h-1v1zM3 3V2H2v1h1zm10 10v1h1v-1h-1zM3 13H2v1h1v-1zm1.675-6.88l.65.76-.65-.76zm.705.055l-.76.65.76-.65zm-.76.65l.76-.65-.76.65zm3 3.5l-.759.651.76-.65zm.76 0l.759.651-.76-.65zm3-3.5l-.76-.65.76.65zm-.055-.705l.651-.759-.65.76zm-.705.055l-.759-.651.76.65zM8 9.232l-.76.65.76.886.76-.886-.76-.65zM13 2H3v2h10V2zm1 11V3h-2v10h2zM3 14h10v-2H3v2zM2 3v10h2V3H2zm1-2a2 2 0 0 0-2 2h2V1zm10 0H3v2h10V1zm2 2a2 2 0 0 0-2-2v2h2zm0 10V3h-2v10h2zm-2 2a2 2 0 0 0 2-2h-2v2zM3 15h10v-2H3v2zm-2-2a2 2 0 0 0 2 2v-2H1zM1 3v10h2V3H1zm4.325 3.88a.5.5 0 0 1-.705-.055L6.14 5.524a1.5 1.5 0 0 0-2.115-.163L5.325 6.88zm.055-.705a.5.5 0 0 1-.055.705L4.024 5.36a1.5 1.5 0 0 0-.163 2.115L5.38 6.175zm3 3.5l-3-3.5L3.86 7.476l3 3.5L8.38 9.675zM8 9.5a.5.5 0 0 1 .38.175L6.86 10.976A1.5 1.5 0 0 0 8 11.5v-2zm-.38.175A.5.5 0 0 1 8 9.5v2a1.5 1.5 0 0 0 1.139-.524L7.62 9.675zm3-3.5l-3 3.5 1.519 1.301 3-3.5-1.519-1.301zm.055.705a.5.5 0 0 1-.055-.705l1.519 1.301a1.5 1.5 0 0 0-.163-2.115L10.675 6.88zm.705-.055a.5.5 0 0 1-.705.055l1.301-1.519a1.5 1.5 0 0 0-2.115.163l1.519 1.301zM8.76 9.883l2.62-3.058L9.86 5.524 7.241 8.58l1.518 1.302zM4.62 6.825l2.62 3.058L8.76 8.58 6.138 5.524 4.62 6.825z"
                  fill="#212121"
                  mask="url(#a)"
                />
              </g>
            </svg>
          </DownSVG>
        </span>
        <CSSTransition
          classNames={
            Object {
              "enter": "fade-enter",
              "enterActive": "fade-enter-active",
              "exit": "fade-exit",
              "exitActive": "fade-exit-active",
            }
          }
          in={false}
          timeout={200}
          unmountOnExit={true}
        >
          <Transition
            appear={false}
            enter={true}
            exit={true}
            in={false}
            mountOnEnter={false}
            onEnter={[Function]}
            onEntered={[Function]}
            onEntering={[Function]}
            onExit={[Function]}
            onExited={[Function]}
            onExiting={[Function]}
            timeout={200}
            unmountOnExit={true}
          />
        </CSSTransition>
      </li>
    </Breadcrumb>
  </ul>
</Breadcrumbs>
`;

exports[`<Breadcrumbs /> should render top level items 1`] = `
<Breadcrumbs
  items={
    Array [
      Object {
        "name": "First",
      },
      Object {
        "name": "Second",
      },
      Object {
        "name": "Third",
      },
    ]
  }
>
  <ul
    className="breadcrumbs"
  >
    <Breadcrumb
      canOpen={false}
      data-testid="breadcrumb:0"
      getSiblingHref={[Function]}
      getSiblingName={[Function]}
      isActiveSibling={[Function]}
      key="0"
      onSiblingsShow={[Function]}
      title="First"
    >
      <li
        data-testid="breadcrumb:0"
      >
        <a
          className="link"
        >
          First
        </a>
      </li>
    </Breadcrumb>
    <Breadcrumb
      canOpen={false}
      data-testid="breadcrumb:1"
      getSiblingHref={[Function]}
      getSiblingName={[Function]}
      isActiveSibling={[Function]}
      key="1"
      onSiblingsShow={[Function]}
      title="Second"
    >
      <li
        data-testid="breadcrumb:1"
      >
        <a
          className="link"
        >
          Second
        </a>
      </li>
    </Breadcrumb>
    <Breadcrumb
      canOpen={false}
      data-testid="breadcrumb:2"
      getSiblingHref={[Function]}
      getSiblingName={[Function]}
      isActiveSibling={[Function]}
      key="2"
      onSiblingsShow={[Function]}
      title="Third"
    >
      <li
        data-testid="breadcrumb:2"
      >
        <a
          className="link"
        >
          Third
        </a>
      </li>
    </Breadcrumb>
  </ul>
</Breadcrumbs>
`;
